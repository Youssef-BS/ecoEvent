pipeline {
    agent any
    stages {
        stage('Reset Permissions') {
            steps {
                sh '''
                    echo "=== Nuclear permission reset ==="
                    # Find Jenkins user ID
                    JENKINS_UID=$(id -u jenkins 2>/dev/null || echo "1000")
                    JENKINS_GID=$(id -g jenkins 2>/dev/null || echo "1000")
                    echo "Jenkins UID:GID: $JENKINS_UID:$JENKINS_GID"
                    
                    # Reset everything to Jenkins user
                    sudo chown -R $JENKINS_UID:$JENKINS_GID . || true
                    sudo chown -R jenkins:jenkins . || true
                    sudo chown -R $(whoami):$(whoami) . || true
                    
                    # Remove all Docker-created files
                    sudo rm -rf bootstrap/cache/*.php 2>/dev/null || true
                    sudo rm -rf storage/framework/* 2>/dev/null || true
                    sudo rm -rf vendor node_modules 2>/dev/null || true
                    
                    # Recreate essential directories
                    mkdir -p bootstrap/cache storage/framework/sessions storage/framework/views storage/framework/cache/data storage/logs
                    chmod -R 775 bootstrap/cache storage
                    chmod -R 777 storage/framework storage/logs
                    
                    echo "=== Workspace cleaned ==="
                '''
            }
        }
        
        stage('GIT') {
            steps {
                cleanWs()  // Clean workspace before checkout
                git(
                    branch: 'Devops', 
                    url: 'https://github.com/Youssef-BS/ecoEvent.git',
                    credentialsId: 'github-creds'
                )
            }
        }
        
        stage('Set Safe Environment') {
            steps {
                sh '''
                    echo "=== Setting safe environment ==="
                    # Set the user IDs for Docker Compose
                    export CURRENT_UID=$(id -u)
                    export CURRENT_GID=$(id -g)
                    echo "Using UID:GID: $CURRENT_UID:$CURRENT_GID"
                    
                    # Make sure we own everything
                    chown -R $CURRENT_UID:$CURRENT_GID . 2>/dev/null || true
                    chmod -R 755 . 2>/dev/null || true
                '''
            }
        }
        
        stage('Build Docker Images') {
            steps {
                sh '''
                    # Build with explicit user context
                    sudo docker compose build --no-cache --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g)
                '''
            }
        }
        
        stage('Deploy with Docker Compose') {
            steps {
                sh '''
                    # Stop and remove everything
                    sudo docker compose down -v --remove-orphans
                    
                    # Start with explicit user
                    export CURRENT_UID=$(id -u)
                    export CURRENT_GID=$(id -g)
                    sudo -E docker compose up -d
                '''
            }
        }
        
        stage('Wait and Setup') {
            steps {
                sh '''
                    sleep 30
                    # Run setup commands
                    sudo docker exec ecoevent-app php artisan key:generate --force
                    sudo docker exec ecoevent-app php artisan migrate --force
                    sudo docker exec ecoevent-app php artisan config:cache
                '''
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    retry(5) {
                        sleep 10
                        sh 'curl -f http://192.168.163.128:8089/ || exit 1'
                    }
                }
            }
        }
        
        stage('Post-Build Cleanup') {
            steps {
                sh '''
                    echo "=== Cleaning up for next build ==="
                    # Stop containers
                    sudo docker compose down
                    
                    # Reset permissions
                    sudo chown -R jenkins:jenkins . 2>/dev/null || true
                    sudo chown -R $(whoami):$(whoami) . 2>/dev/null || true
                    
                    # Remove Docker-created files
                    sudo rm -rf bootstrap/cache/*.php storage/framework/* 2>/dev/null || true
                '''
            }
        }
    }
    
    post {
        always {
            sh '''
                echo "=== Final permission reset ==="
                sudo chown -R jenkins:jenkins . 2>/dev/null || true
                sudo chown -R $(whoami):$(whoami) . 2>/dev/null || true
            '''
        }
    }
}