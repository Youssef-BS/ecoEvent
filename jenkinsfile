pipeline {
    agent any
    stages {
        stage('GIT') {
            steps {
                git(
                    branch: 'Devops', 
                    url: 'https://github.com/Youssef-BS/ecoEvent.git',
                    credentialsId: 'github-creds'
                )
            }
        }
        
        // Install required tools on Jenkins
        stage('Install Tools') {
            steps {
                sh '''
                    # Install PHP and extensions
                    sudo apt update
                    sudo apt install -y php php-cli php-mysql php-zip php-gd php-mbstring php-curl php-xml php-bcmath
                    
                    # Install Composer
                    curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer
                    
                    # Install Node.js
                    curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
                    sudo apt install -y nodejs
                    
                    # Verify installations
                    php --version
                    composer --version
                    node --version
                    npm --version
                '''
            }
        }
        
        stage('Install PHP Dependencies') {
            steps {
                sh 'composer install --no-dev --optimize-autoloader'
            }
        }
        
        stage('Install NPM Dependencies') {
            steps {
                sh 'npm install'
            }
        }
        
        stage('Build Assets') {
            steps {
                sh 'npm run build'
            }
        }
        
        stage('Run Migrations and Optimize') {
            steps {
                sh '''
                    php artisan config:cache
                    php artisan route:cache
                    php artisan view:cache
                '''
            }
        }
        
        // Your existing Docker stages
        stage('Build Docker Images') {
            steps {
                sh 'sudo docker compose build'
            }
        }
        
        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'DOCKER_HUB_CREDENTIALS',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASSWORD'
                )]) {
                    sh '''
                        sudo docker logout
                        echo "${DOCKER_PASSWORD}" | sudo docker login -u "${DOCKER_USER}" --password-stdin
                    '''
                }
            }
        }
        
        stage('Push Docker Images') {
            steps {
                sh '''
                    sudo docker compose push
                    sudo docker logout
                '''
            }
        }
        
        stage('Deploy with Docker Compose') {
            steps {
                sh 'sudo docker compose down && sudo docker compose up -d'
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    retry(5) {
                        sleep 10
                        sh 'curl -f http://192.168.163.128:8089/ || exit 1'
                    }
                }
            }
        }
    }
    
}