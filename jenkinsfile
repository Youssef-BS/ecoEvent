pipeline {
    agent any
    stages {
        stage('GIT') {
            steps {
                git(
                    branch: 'Devops', 
                    url: 'https://github.com/Youssef-BS/ecoEvent.git',
                    credentialsId: 'github-creds'
                )
            }
        }
        
        stage('Install PHP Dependencies') {
            steps {
                sh '''
                    docker run --rm -v $PWD:/app composer:2.2 install --no-dev --optimize-autoloader
                '''
            }
        }
        
        stage('Frontend Application') {
            steps {
                sh '''
                    # Use Docker to run Node.js 20 for the build
                    docker run --rm -v $PWD:/app -w /app node:20-alpine sh -c "npm install && npm run build"
                '''
            }
        }

        stage('Upload Laravel Build to Nexus') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'NEXUS_CREDENTIALS',
                    usernameVariable: 'NEXUS_USER',
                    passwordVariable: 'NEXUS_PASS'
                )]) {
                    sh '''

                        # Clean previous archives
                        rm -f ecoevent_build_*.zip
                        echo "=== Creating build artifact ==="
                        # Create a zip of Laravel backend + built frontend
                        zip -r ecoevent_build_${BUILD_NUMBER}.zip app/ bootstrap/ config/ database/ public/ resources/ routes/ artisan composer.json package.json

                        echo "=== Uploading build artifact to Nexus ==="

                        # Upload to Nexus Raw repository
                        curl -v -u "${NEXUS_USER}:${NEXUS_PASS}" \
                        --upload-file $PWD/ecoevent_build_${BUILD_NUMBER}.zip \
                        http://192.168.163.128:8081/repository/laravel-builds/ecoevent_build_${BUILD_NUMBER}.zip


                        echo "=== Upload complete ==="
                    '''
                }
            }
        }

        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    withCredentials([string(credentialsId: 'SonarQube-token', variable: 'SONAR_TOKEN')]) {
                        sh '''
                            echo "=== Running SonarQube analysis ==="
                            
                            docker run --rm \
                              -e SONAR_HOST_URL="http://192.168.163.128:9000" \
                              -v "$PWD:/usr/src" \
                              sonarsource/sonar-scanner-cli:latest \
                              -Dsonar.projectKey=ecoEvent-Laravel \
                              -Dsonar.projectName="ecoEvent Laravel" \
                              -Dsonar.projectVersion=1.0 \
                              -Dsonar.sources=app,resources \
                              -Dsonar.tests=tests \
                              -Dsonar.php.coverage.reportPaths=reports/clover.xml \
                              -Dsonar.php.tests.reportPath=reports/junit.xml \
                              -Dsonar.token=$SONAR_TOKEN
                        '''
                    }
                }
            }
        }


 
        stage('Run Migrations and Optimize') {
            steps {
                sh '''
                    docker run --rm -v $PWD:/app -w /app php:8.2-cli sh -c "
                        apt-get update && 
                        apt-get install -y libzip-dev libpng-dev libonig-dev libxml2-dev &&
                        docker-php-ext-install zip gd mbstring pdo_mysql &&
                        php artisan config:cache &&
                        php artisan route:cache && 
                        php artisan view:cache
                    "
                '''
            }
        }
        
        // Your existing Docker stages
        stage('Build Docker Images') {
            steps {
                sh 'sudo docker compose build'
            }
        }
        
        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'DOCKER_HUB_CREDENTIALS',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASSWORD'
                )]) {
                    sh '''
                        sudo docker logout
                        echo "${DOCKER_PASSWORD}" | sudo docker login -u "${DOCKER_USER}" --password-stdin
                    '''
                }
            }
        }
        
        stage('Push Docker Images') {
            steps {
                sh '''
                    sudo docker compose push
                    sudo docker logout
                '''
            }
        }


        stage('Deploy with Docker Compose') {
            steps {
                sh 'sudo docker compose down && sudo docker compose up -d'
            }
        }
        stage('Wait for Services') {
            steps {
                sh '''
                    echo "Waiting for services to start..."
                    sleep 30
                    sudo docker ps -a
                '''
            }
        }
        
        stage('Laravel Setup') {
            steps {
                sh '''
                    echo "=== Fixing permissions ==="
                    sudo docker exec ecoevent-app chmod -R 775 storage/ bootstrap/cache/
                    sudo docker exec ecoevent-app chown -R www-data:www-data storage/ bootstrap/cache/

                    echo "=== Creating .env if missing ==="
                    sudo docker exec ecoevent-app sh -c "if [ ! -f /var/www/.env ]; then cp /var/www/.env.example /var/www/.env; fi"

                    echo "=== Generating APP_KEY ==="
                    sudo docker exec ecoevent-app php artisan key:generate --force

                    echo "=== Caching configuration ==="
                    sudo docker exec ecoevent-app php artisan config:clear
                    sudo docker exec ecoevent-app php artisan config:cache
                    sudo docker exec ecoevent-app php artisan route:cache
                    sudo docker exec ecoevent-app php artisan view:cache
                '''
            }
        }


        stage('Database Setup') {
            steps {
                sh '''
                    echo "=== Running database migrations ==="
                    sudo docker exec ecoevent-app php artisan migrate --force || echo "Migrations failed"
                    
                    echo "=== Generating application key ==="
                    sudo docker exec ecoevent-app php artisan key:generate --force || echo "Key generation failed"
                '''
            }
        }
        
        stage('Laravel Optimization') {
            steps {
                sh '''
                    echo "=== Optimizing Laravel ==="
                    sudo docker exec ecoevent-app php artisan config:clear || true
                    sudo docker exec ecoevent-app php artisan cache:clear || true
                    sudo docker exec ecoevent-app php artisan view:clear || true
                    sudo docker exec ecoevent-app php artisan config:cache || true
                    sudo docker exec ecoevent-app php artisan route:cache || true
                    sudo docker exec ecoevent-app php artisan view:cache || true
                '''
            }
        }
        
        stage('Debug Application') {
            steps {
                sh '''
                    
                    echo "=== Storage Permissions ==="
                    sudo docker exec ecoevent-app ls -la storage/ bootstrap/cache/ || true
                    sudo docker exec ecoevent-app chmod -R 775 storage/ bootstrap/cache/ || true
                    sudo docker exec ecoevent-app chown -R www-data:www-data storage/ bootstrap/cache/ || true
                '''
            }
        }

        stage('Test Metrics Endpoint') {
            steps {
                sh '''
                    # Test that metrics endpoint is accessible
                    sleep 10
                    curl -s http://localhost:8089/metrics || echo "Metrics endpoint will be available after deployment"
                '''
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    retry(5) {
                        sleep 10
                        sh 'curl -f http://192.168.163.128:8089/ || exit 1'
                    }
                }
            }
        }
    }

        post {
        success {
            mail to: 'oussema2khemiri5@gmail.com',
                subject: "‚úÖ SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER} completed successfully",
                body: """
                üéâ Deployment Successful!

                ‚úÖ Job Name: ${env.JOB_NAME}
                ‚úÖ Build Number: #${env.BUILD_NUMBER}
                üïí Duration: ${currentBuild.durationString}

                üí¨ Summary:
                - PHP dependencies installed
                - Frontend (Node) built successfully
                - SonarQube analysis passed
                - Docker images built and pushed to Docker Hub 
                - Laravel app deployed via Docker Compose
                - Metrics endpoint verified

                üîó Jenkins Build: ${env.BUILD_URL}

                Your Laravel + Docker  pipeline ran successfully üöÄ
                """
        }

        failure {
            mail to: 'oussema2khemiri5@gmail.com',
                subject: "‚ùå FAILURE: ${env.JOB_NAME} #${env.BUILD_NUMBER} failed",
                body: """
                ‚ö†Ô∏è Deployment Failed!

                ‚ùå Job Name: ${env.JOB_NAME}
                ‚ùå Build Number: #${env.BUILD_NUMBER}
                üïí Duration: ${currentBuild.durationString}

                üí• The pipeline encountered an error during execution.

                Please check:
                - Jenkins console logs for the failing stage
                - SonarQube analysis results
                - Docker build/push logs
                - Laravel container setup (migrations, permissions, .env)

                üîó Jenkins Build: ${env.BUILD_URL}

                Immediate action recommended üß†
                """
        }
    }

    
}