pipeline {
    agent any
    stages {
        stage('GIT') {
            steps {
                git(
                    branch: 'Devops', 
                    url: 'https://github.com/Youssef-BS/ecoEvent.git',
                    credentialsId: 'github-creds'
                )
            }
        }
        
        stage('Install PHP Dependencies') {
            steps {
                sh '''
                    docker run --rm -v $PWD:/app composer:2.2 install --no-dev --optimize-autoloader
                '''
            }
        }
        
        stage('Build Frontend with Node 20') {
            steps {
                sh '''
                    # Use Docker to run Node.js 20 for the build
                    docker run --rm -v $PWD:/app -w /app node:20-alpine sh -c "npm install && npm run build"
                '''
            }
        }
        
        stage('Run Migrations and Optimize') {
            steps {
                sh '''
                    docker run --rm -v $PWD:/app -w /app php:8.2-cli sh -c "
                        apt-get update && 
                        apt-get install -y libzip-dev libpng-dev libonig-dev libxml2-dev &&
                        docker-php-ext-install zip gd mbstring pdo_mysql &&
                        php artisan config:cache &&
                        php artisan route:cache && 
                        php artisan view:cache
                    "
                '''
            }
        }
        
        // Your existing Docker stages
        stage('Build Docker Images') {
            steps {
                sh 'sudo docker compose build'
            }
        }
        
        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'DOCKER_HUB_CREDENTIALS',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASSWORD'
                )]) {
                    sh '''
                        sudo docker logout
                        echo "${DOCKER_PASSWORD}" | sudo docker login -u "${DOCKER_USER}" --password-stdin
                    '''
                }
            }
        }
        
        stage('Push Docker Images') {
            steps {
                sh '''
                    sudo docker compose push
                    sudo docker logout
                '''
            }
        }
        
        stage('Deploy with Docker Compose') {
            steps {
                sh 'sudo docker compose down && sudo docker compose up -d'
            }
        }
        stage('Wait for Services') {
            steps {
                sh '''
                    echo "Waiting for services to start..."
                    sleep 30
                    sudo docker ps -a
                '''
            }
        }
        
        stage('Laravel Setup') {
            steps {
                sh '''
                    echo "=== Fixing permissions ==="
                    sudo docker exec ecoevent-app chmod -R 775 storage/ bootstrap/cache/
                    sudo docker exec ecoevent-app chown -R www-data:www-data storage/ bootstrap/cache/

                    echo "=== Generating APP_KEY if not exists ==="
                    sudo docker exec ecoevent-app php artisan key:generate --force

                    echo "=== Clearing and caching config ==="
                    sudo docker exec ecoevent-app php artisan config:clear
                    sudo docker exec ecoevent-app php artisan config:cache
                    sudo docker exec ecoevent-app php artisan route:cache
                    sudo docker exec ecoevent-app php artisan view:cache
                '''
            }
        }


        stage('Database Setup') {
            steps {
                sh '''
                    echo "=== Running database migrations ==="
                    sudo docker exec ecoevent-app php artisan migrate --force || echo "Migrations failed"
                    
                    echo "=== Generating application key ==="
                    sudo docker exec ecoevent-app php artisan key:generate --force || echo "Key generation failed"
                '''
            }
        }
        
        stage('Laravel Optimization') {
            steps {
                sh '''
                    echo "=== Optimizing Laravel ==="
                    sudo docker exec ecoevent-app php artisan config:clear || true
                    sudo docker exec ecoevent-app php artisan cache:clear || true
                    sudo docker exec ecoevent-app php artisan view:clear || true
                    sudo docker exec ecoevent-app php artisan config:cache || true
                    sudo docker exec ecoevent-app php artisan route:cache || true
                    sudo docker exec ecoevent-app php artisan view:cache || true
                '''
            }
        }
        
        stage('Debug Application') {
            steps {
                sh '''
                    echo "=== Application Logs ==="
                    sudo docker logs ecoevent-app --tail 50 || true
                    
                    echo "=== Nginx Logs ==="
                    sudo docker logs ecoevent-webserver --tail 50 || true
                    
                    echo "=== Database Connection Test ==="
                    sudo docker exec ecoevent-app php artisan tinker --execute="try { echo DB::connection()->getPdo() ? 'DB Connected' : 'DB Failed'; } catch (Exception \$e) { echo 'DB Error: ' . \$e->getMessage(); }" || true
                    
                    echo "=== Storage Permissions ==="
                    sudo docker exec ecoevent-app ls -la storage/ bootstrap/cache/ || true
                    sudo docker exec ecoevent-app chmod -R 775 storage/ bootstrap/cache/ || true
                    sudo docker exec ecoevent-app chown -R www-data:www-data storage/ bootstrap/cache/ || true
                '''
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    retry(5) {
                        sleep 10
                        sh 'curl -f http://192.168.163.128:8089/ || exit 1'
                    }
                }
            }
        }
    }
    
}