pipeline {
    agent any
    stages {
        stage('GIT') {
            steps {
                git(
                    branch: 'Devops', 
                    url: 'https://github.com/Youssef-BS/ecoEvent.git',
                    credentialsId: 'github-creds'
                )
            }
        }
        
        stage('Install PHP Dependencies') {
            steps {
                sh '''
                    docker run --rm -v $PWD:/app composer:2.2 install --no-dev --optimize-autoloader
                '''
            }
        }
        
        stage('Build Frontend with Node 20') {
            steps {
                sh '''
                    # Use Docker to run Node.js 20 for the build
                    docker run --rm -v $PWD:/app -w /app node:20-alpine sh -c "npm install && npm run build"
                '''
            }
        }
        
        stage('Run Migrations and Optimize') {
            steps {
                sh '''
                    docker run --rm -v $PWD:/app -w /app php:8.2-cli sh -c "
                        apt-get update && 
                        apt-get install -y libzip-dev libpng-dev libonig-dev libxml2-dev &&
                        docker-php-ext-install zip gd mbstring pdo_mysql &&
                        php artisan config:cache &&
                        php artisan route:cache && 
                        php artisan view:cache
                    "
                '''
            }
        }
        
        // Your existing Docker stages
        stage('Build Docker Images') {
            steps {
                sh 'sudo docker compose build'
            }
        }
        
        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: 'DOCKER_HUB_CREDENTIALS',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASSWORD'
                )]) {
                    sh '''
                        sudo docker logout
                        echo "${DOCKER_PASSWORD}" | sudo docker login -u "${DOCKER_USER}" --password-stdin
                    '''
                }
            }
        }
        
        stage('Push Docker Images') {
            steps {
                sh '''
                    sudo docker compose push
                    sudo docker logout
                '''
            }
        }
        
        stage('Deploy with Docker Compose') {
            steps {
                sh 'sudo docker compose down && sudo docker compose up -d'
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    retry(5) {
                        sleep 10
                        sh 'curl -f http://192.168.163.128:8089/ || exit 1'
                    }
                }
            }
        }
    }
    
}