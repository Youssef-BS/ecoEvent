pipeline {
  agent any
  options {
    // prevents Jenkins' automatic checkout so we can prepare workspace first
    skipDefaultCheckout()
    // optional: limit build concurrency, timeouts, etc.
  }

  environment {
    GIT_URL = 'https://github.com/Youssef-BS/ecoEvent.git'
    GIT_BRANCH = 'Devops'
    GIT_CREDS = 'github-creds'
  }

  stages {
    stage('Prepare workspace (force ownership + cleanup)') {
      steps {
        // must run on node / workspace
        sh '''
          echo "==> Preparing workspace (take ownership and clear Laravel caches)..."
          # make sure jenkins user owns files so git can overwrite them
          sudo chown -R $(whoami):$(whoami) . || true

          # relax permissions so unlinking is allowed
          sudo find . -type d -exec chmod u+rwx,go+rx {} + || true
          sudo find . -type f -exec chmod u+rw,go+r {} + || true

          # remove problematic runtime/cache directories that git might try to overwrite
          sudo rm -rf bootstrap/cache/* 2>/dev/null || true
          sudo rm -rf storage/framework/* 2>/dev/null || true
          sudo rm -rf vendor node_modules 2>/dev/null || true

          echo "==> workspace prepared"
        '''
      }
    }

    stage('Checkout source (clean)') {
      steps {
        // Use GitSCM with WipeWorkspace extension to be extra-safe
        checkout([$class: 'GitSCM',
          branches: [[name: "*/${env.GIT_BRANCH}"]],
          doGenerateSubmoduleConfigurations: false,
          extensions: [
            [$class: 'WipeWorkspace'],            // ensure a fresh workspace for this checkout
            [$class: 'CleanBeforeCheckout']       // another safety, removes untracked files if needed
          ],
          userRemoteConfigs: [[
            url: env.GIT_URL,
            credentialsId: env.GIT_CREDS
          ]]
        ])
      }
    }

    // ------- your other stages below -------
    stage('Build Docker Images') {
      steps {
        sh '''
          echo "Building docker images..."
          sudo docker compose build --no-cache --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g)
        '''
      }
    }

    stage('Deploy with Docker Compose') {
      steps {
        sh '''
          sudo docker compose down -v --remove-orphans || true
          sudo -E docker compose up -d
        '''
      }
    }
    stage('Wait and Setup') {
            steps {
                sh '''
                    sleep 30
                    # Run setup commands
                    sudo docker exec ecoevent-app php artisan key:generate --force
                    sudo docker exec ecoevent-app php artisan migrate --force
                    sudo docker exec ecoevent-app php artisan config:cache
                '''
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    retry(5) {
                        sleep 10
                        sh 'curl -f http://192.168.163.128:8089/ || exit 1'
                    }
                }
            }
        }

    // add your Wait and verify stages as before...
  }

  post {
    always {
      // post steps that touch the workspace must run inside a node block
      node {
        sh '''
          echo "==> Post-build: reset ownership for next build"
          sudo chown -R jenkins:jenkins . 2>/dev/null || true
          sudo rm -rf bootstrap/cache/*.php storage/framework/* 2>/dev/null || true
        '''
      }
    }
  }
}
