pipeline {
    agent any
    stages {
        stage('Pre-Cleanup') {
            steps {
                cleanWs()
                sh '''
                    echo "=== Resetting workspace permissions ==="
                    # Force reset all permissions to Jenkins user
                    sudo chown -R jenkins:jenkins . 2>/dev/null || true
                    sudo chown -R $(whoami):$(whoami) . 2>/dev/null || true
                    
                    # Remove all cache and generated files
                    sudo rm -rf bootstrap/cache/*.php 2>/dev/null || true
                    sudo rm -rf storage/framework/* 2>/dev/null || true
                    sudo rm -rf vendor node_modules 2>/dev/null || true
                    
                    # Recreate directories with proper permissions
                    mkdir -p bootstrap/cache storage/framework/sessions storage/framework/views storage/framework/cache/data storage/logs
                    chmod -R 775 bootstrap/cache storage
                    chmod -R 777 storage/framework storage/logs
                '''
            }
        }
        
        stage('GIT') {
            steps {
                git(
                    branch: 'Devops', 
                    url: 'https://github.com/Youssef-BS/ecoEvent.git',
                    credentialsId: 'github-creds'
                )
            }
        }
        
        stage('Install Node.js 20') {
            steps {
                sh '''
                    sudo apt remove -y nodejs npm 2>/dev/null || true
                    curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
                    sudo apt install -y nodejs
                '''
            }
        }
        
        stage('Install PHP and Composer') {
            steps {
                sh '''
                    sudo apt update
                    sudo apt install -y php php-cli php-mysql php-zip php-gd php-mbstring php-curl php-xml php-bcmath
                    curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer
                '''
            }
        }
        
        stage('Set Safe Permissions') {
            steps {
                sh '''
                    echo "=== Setting safe permissions for build ==="
                    chmod -R 755 .
                    chmod -R 775 storage bootstrap/cache
                    chmod -R 777 storage/framework storage/logs
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                sh '''
                    composer install --no-dev --optimize-autoloader
                    npm install
                    npm run build
                '''
            }
        }
        
        stage('Build Docker Images') {
            steps {
                sh 'sudo docker compose build --no-cache'
            }
        }
        
        stage('Deploy with Docker Compose') {
            steps {
                sh 'sudo docker compose down && sudo docker compose up -d'
            }
        }
        
        stage('Wait for Services') {
            steps {
                sh 'sleep 30'
            }
        }
        
        stage('Setup Application') {
            steps {
                sh '''
                    sudo docker exec ecoevent-app php artisan key:generate --force
                    sudo docker exec ecoevent-app php artisan migrate --force
                    sudo docker exec ecoevent-app php artisan config:cache
                    sudo docker exec ecoevent-app php artisan route:cache
                    sudo docker exec ecoevent-app php artisan view:cache
                '''
            }
        }
        
        stage('Post-Deploy Cleanup') {
            steps {
                sh '''
                    echo "=== Cleaning up after deployment ==="
                    sudo docker compose down
                    
                    # Reset permissions for next build
                    sudo chown -R jenkins:jenkins . 2>/dev/null || true
                    sudo chown -R $(whoami):$(whoami) . 2>/dev/null || true
                    chmod -R 755 .
                '''
            }
        }
        
        stage('Verify Deployment') {
            steps {
                sh 'sudo docker compose up -d'
                script {
                    retry(5) {
                        sleep 10
                        sh 'curl -f http://192.168.163.128:8089/ || exit 1'
                    }
                }
            }
        }
    }
}